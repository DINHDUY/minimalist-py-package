# Minimalist Python Package Template
# See .github/copilot-instructions.md for detailed development guidelines and AI assistance setup

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ cookiecutter.project_slug }}"
dynamic = ["version"]
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
license = "{{ cookiecutter.license }}"
requires-python = ">={{ cookiecutter.python_version }}"
authors = [
    { name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: {{ cookiecutter.license }} License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = []

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
    "commitizen>=3.0.0",
]

[project.urls]
Homepage = "{{ cookiecutter.github_url }}"
Documentation = "{{ cookiecutter.github_url }}#readme"
Repository = "{{ cookiecutter.github_url }}.git"
Issues = "{{ cookiecutter.github_url }}/issues"

[tool.hatch.version]
path = "src/{{ cookiecutter.package_name }}/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.package_name }}"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["{{ cookiecutter.package_name }}"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--cov={{ cookiecutter.package_name }}",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
    "-ra",
    "--strict-markers",
    "--strict-config",
]
testpaths = ["tests"]
pythonpath = ["src"]

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true
